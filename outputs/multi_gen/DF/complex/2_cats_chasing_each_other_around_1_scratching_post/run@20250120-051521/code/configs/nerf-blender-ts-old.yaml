name: "nerf-blender"
tag: ""
exp_root_dir: "outputs"
seed: 42

data_type: "blender-datamodule"
data:
  scene: ???
  root_dir: "./load/nerf_synthetic/${data.scene}"
  img_wh:
    - 800
    - 800
  # img_downscale: 1 # specify training image size by either img_wh or img_downscale
  near_plane: 2.0
  far_plane: 6.0
  train_split: "train"
  val_split: "val"
  test_split: "test"

  # preprocess stuffs
  train_num_rays: 256
  # batch_image_sampling: true
  # background_color: random
  # dynamic_ray_sampling: true
  # max_train_num_rays: 8192


system_type: nerf-system-threestudio
system:
  geometry_type: "implicit-volume"
  geometry:
    radius: 2.0
    normal_type: "analytic"

    # use Magic3D density initialization instead
    density_bias: "blob_magic3d"
    density_activation: trunc_exp
    density_blob_scale: 10.
    density_blob_std: 0.5


    # coarse to fine hash grid encoding
    # to ensure smooth analytic normals
    pos_encoding_config:
      otype: ProgressiveBandHashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096
      start_level: 8 # resolution ~200
      start_step: 2000
      update_steps: 500

  # material_type: "diffuse-with-point-light-material"
  # material:
  #   ambient_only_steps: 2001
  #   albedo_activation: scale_-11_01
  material_type: "no-material"
  material:
    # n_output_dims: 3
    color_activation: none
    
  background_type: "solid-color-background"
  # background:
  #   color_activation: scale_-11_01

  renderer_type: "nerf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 1024

  loggers:
    wandb:
      enable: false
      project: 'threestudio'
      name: None

  loss:
    lambda_rgb: 1.
    lambda_distortion: 0.
    # lambda_sds: 1.
    # lambda_orient: [0, 10., 1000., 5000]
    # lambda_sparsity: 1.
    # lambda_opaque: 0.0
  optimizer:
    name: AdamW
    args:
      lr: 0.01
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01
      background:
        lr: 0.001
  scheduler:
    name: MultiStepLR
    interval: step
    args:
      milestones: [10000, 15000, 18000]
      gamma: 0.33

  data:
    train_num_rays: 256
    batch_image_sampling: true
    background_color: random
    dynamic_ray_sampling: true
    max_train_num_rays: 8192
# model:
#   name: nerf-volume-renderer
#   # radius: 1.5
#   radius: 2
#   num_samples_per_ray: 1024
#   train_num_rays: 256
#   max_train_num_rays: 8192
#   grid_prune: true
#   dynamic_ray_sampling: true
#   batch_image_sampling: true
#   randomized: true
#   ray_chunk: 32768
#   learned_background: false
#   background_color: random
#   geometry:
#     name: volume-density
#     radius: ${model.radius}
#     feature_dim: 16
#     density_activation: trunc_exp
#     density_bias: -1
#     isosurface:
#       method: mc
#       resolution: 256
#       chunk: 2097152
#       threshold: 5.0
#     xyz_encoding_config:
#       otype: HashGrid
#       n_levels: 16
#       n_features_per_level: 2
#       log2_hashmap_size: 19
#       base_resolution: 16
#       per_level_scale: 1.447269237440378
#     mlp_network_config:
#       otype: FullyFusedMLP
#       activation: ReLU
#       output_activation: none
#       n_neurons: 64
#       n_hidden_layers: 1
#   texture:
#     name: volume-radiance
#     input_feature_dim: ${model.geometry.feature_dim}
#     dir_encoding_config:
#       otype: SphericalHarmonics
#       degree: 4
#     mlp_network_config:
#       otype: FullyFusedMLP
#       activation: ReLU
#       output_activation: Sigmoid
#       n_neurons: 64
#       n_hidden_layers: 2

trainer:
  max_steps: 20000
  log_every_n_steps: 200
  num_sanity_val_steps: 0
  val_check_interval: 1000
  limit_train_batches: 1.0
  limit_val_batches: 2
  enable_progress_bar: true
  precision: 16

checkpoint:
  save_last: true # save at each validation time
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}